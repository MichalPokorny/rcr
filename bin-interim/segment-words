#!/usr/bin/ruby -w

require 'rcr/config'
require 'rcr/letter-classifier/neural'
require 'rcr/data/image'
require 'rcr/easy'

require 'rubyfish'

require 'fileutils'
Dir["segmented_*.png"].each { |f| FileUtils.rm(f) }

BATCH_SIZE = 5
GENERATIONS = 30

5.times do |generation|
	classifier = RCR.build_letter_classifier
	segmentator = RCR.build_word_segmentator

	puts "== Classifier evaluation: %.2f" % classifier.evaluate(Config.prepared_letter_data_path)

	bootstrap_dataset = {}
	('A'..'Z').each do |l| bootstrap_dataset[l] = [] end

	diff_sum = 0
	
	batch = Dir[File.join(RCR::Config.segmentation_inputs_path, "*")].shuffle.take(BATCH_SIZE)
	batch.each.with_index do |input_dir, i|
		raise unless input_dir =~ /\/(\d+)(\/|\Z)/

		puts "running #$1 (#{i+1}/#{batch.size})"

		image = RCR::Data::Image.load(File.join(input_dir, "data.png"))
		segmentation, score = *segmentator.segment_with_score(image)

		expect = File.read(File.join(input_dir, "expect.txt")).strip

		text = segmentation.detected_text(classifier)
		distance = RubyFish::Levenshtein.distance(text, expect)
		puts "Segmentation says: #{text}, expected: #{expect}, score: #{score}. LSD = #{distance}"
		diff_sum += distance
		word_segmentation, score = *segmentator.segment_for_word_with_score(image, expect)

		#filename = "segmented.png"
		segmentator.show_oversegmentation(image) # Must be here.

		if word_segmentation
			with_best_found = image.dup
			word_segmentation.draw_on_image!(with_best_found)
			with_best_found.save("segmented_#{expect}_gen#{generation}.png")

			word_segmentation.boxes.each.with_index do |box, j|
				crop = box.to_image
				# TODO FUJ
				letter = expect[j]
				input = RCR::LetterClassifier::Neural.image_to_net_input(crop)

				bootstrap_dataset[letter] << input
			end
			puts "Best segmentation for #{expect} score: #{score}"
		else
			puts "Best segmentation for #{expect} not found."
		end

		#segmentation.draw_on_image!(image)
		#image.save(filename)

		#puts "Segmented image saved in #{filename}"
	end

	puts "Total distance before: #{diff_sum}"
	puts "Will train in 10 seconds."

	sleep 10 

	classifier.train(bootstrap_dataset, generations: GENERATIONS, logging: true)
	classifier.save(File.join(RCR::Config.trained_path, "letter-classifier"))
	puts "-----------"
	puts "Training finished."
end
