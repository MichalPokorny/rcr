#!/usr/bin/ruby -w

dir = "/home/prvak/rocnikac/kgr-data/trained"

if ARGV[0] == "-i" || ARGV[0] == "--interactive"
	require 'kgr/gui/segment-word'
	gui = KGR::GUI::SegmentWord.new("#{dir}/word-segmenter", "#{dir}/letter-classifier")
	gui.run
else
	require 'kgr/word-segmentator/default'
	require 'kgr/word-segmentator/heuristic-oversegmentation'
	require 'kgr/letter-classifier/neural'
	require 'kgr/data/image'
	#require 'kgr/heuristic-oversegmenter/stupid'
	require 'kgr/heuristic-oversegmenter/local-minima'
	require 'kgr/markov-chain-model'

	classifier = KGR::LetterClassifier::Neural.load("#{dir}/letter-classifier")

#	segmentator = KGR::WordSegmentator::Default.load("#{dir}/word-segmenter")
#	model = KGR::MarkovChainModel.load_from_corpus(1, '../kgr-data/prepared/corpus')
	model = nil
#	segmentator = KGR::WordSegmentator::HeuristicOversegmentation.new(KGR::HeuristicOversegmenter::Stupid.new, classifier, model)
	segmentator = KGR::WordSegmentator::HeuristicOversegmentation.new(KGR::HeuristicOversegmenter::LocalMinima.new, classifier, model)
	image = KGR::Data::Image.load(ARGV[0] || "../kgr-data/input/segment/10/data.png")
	segmentation = segmentator.segment(image)

	puts "Segmentation says: #{segmentation.detected_text(classifier)}"

	filename = "segmented.png"
	segmentator.show_oversegmentation(image) # Must be here.
	segmentation.draw_on_image!(image)
	image.save(filename)

	puts "Segmented image saved in #{filename}"
end
