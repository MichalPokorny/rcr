#!/usr/bin/ruby -w

dir = "/home/prvak/rocnikac/rcr-data/trained"

if ARGV[0] == "-i" || ARGV[0] == "--interactive"
	require 'rcr/gui/segment-word'
	gui = RCR::GUI::SegmentWord.new("#{dir}/word-segmenter", "#{dir}/letter-classifier")
	gui.run
else
	require 'rcr/word-segmentator/default'
	require 'rcr/word-segmentator/heuristic-oversegmentation'
	require 'rcr/letter-classifier/neural'
	require 'rcr/data/image'
	#require 'rcr/heuristic-oversegmenter/stupid'
	require 'rcr/heuristic-oversegmenter/local-minima'
	require 'rcr/markov-chain-model'

	classifier = RCR::LetterClassifier::Neural.load("#{dir}/letter-classifier")

#	segmentator = RCR::WordSegmentator::Default.load("#{dir}/word-segmenter")
#	model = RCR::MarkovChainModel.load_from_corpus(1, '../rcr-data/prepared/corpus')
	model = nil
	# Old: Stupid instead of LocalMinima
	segmentator = RCR::WordSegmentator::HeuristicOversegmentation.new(RCR::HeuristicOversegmenter::LocalMinima.new, classifier, model)

	i = 6

	image = RCR::Data::Image.load(ARGV[0] || "../rcr-data/input/segment/#{i}/data.png")
	segmentation = segmentator.segment(image)

	word_file = "../rcr-data/input/segment/#{i}/expect.txt"
	word = if File.exist?(word_file) then File.read(word_file).strip end

	puts "Segmentation says: #{segmentation.detected_text(classifier)}"

	word_segmentation = if word then segmentator.segment_for_word(image, word) end

	filename = "segmented.png"
	segmentator.show_oversegmentation(image) # Must be here.

	if word
		if word_segmentation
			with_best_found = image.dup
			word_segmentation.draw_on_image!(with_best_found)
			with_best_found.save("segmented_#{word}.png")
		else
			puts "Best segmentation for #{word} not found."
		end
	end

	segmentation.draw_on_image!(image)
	image.save(filename)

	puts "Segmented image saved in #{filename}"
end
