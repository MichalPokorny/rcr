#!/usr/bin/ruby -w

require 'rcr/config'
require 'rcr/marshal'
require 'rcr/heuristic_oversegmenter/local_minima'
require 'rcr/word_segmentator/heuristic_oversegmentation'

# Zajimave a dlouhe: 18, 19, 20, 21, 22

if ARGV[0] == "-i" || ARGV[0] == "--interactive"
	require 'rcr/gui/segment-word'
	gui = RCR::GUI::SegmentWord.new(RCR::Config.word_segmenter_path, RCR::Config.letter_classifier_path)
	gui.run
else
	require 'rcr/easy'
	require 'rcr/data/image'

	#classifier = RCR.build_letter_classifier
	classifier = RCR::Marshal.load(File.join(RCR::Config.trained_path, "letter-classifier-oversegmentation"))
	segmentator = RCR::WordSegmentator::HeuristicOversegmentation.new(
		RCR::HeuristicOversegmenter::LocalMinima.new, classifier, RCR.build_language_model)

	#segmentator = RCR.build_word_segmentator

	i = 67

	image_path = ARGV[0] || File.join(RCR::Config.segmentation_inputs_path, i.to_s, "data.png")

	image, image2, image3 = 3.times.map { RCR::Data::Image.load(image_path) }
	segmentation = segmentator.segment(image)

	word_file = File.join(RCR::Config.segmentation_inputs_path, i.to_s, "expect.txt")
	word = if File.exist?(word_file) then File.read(word_file).strip end

	puts "Segmentation says: #{segmentation.detected_text(classifier)} (should say #{word})"

	word_segmentation = if word then segmentator.segment_for_word(image, word) end

	require 'pp'
	result = segmentator.segment_with_lengths(image)
	pp result
	segmentator.path_to_segmentation(image2, result[word.length][0]).draw_on_image!(image2)
	image2.save("segmented_length.png")

	segmentator.show_oversegmentation(image) # Must be here.

	if word
		if word_segmentation
			word_segmentation.draw_on_image!(image3)
#		
#			dataset = {}
#			('A'..'Z').each do |l| dataset[l] = [] end
#			word_segmentation.boxes.each.with_index do |box, j|
#				crop = box.to_image
#				# TODO FUJ
#				letter = word[j]
#				input = RCR::LetterClassifier::Neural.image_to_net_input(crop)
#
#				dataset[letter] << input
#			end
#
#			classifier.train(dataset)
#			puts "Training finished."
#
			image3.save("segmented_by_prior_knowledge.png")
		else
			puts "Best segmentation for #{word} not found."
		end
	end

	segmentation.draw_on_image!(image)
	image.save("segmented_best_found.png")
end
