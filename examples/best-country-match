#!/usr/bin/ruby -w

require 'rcr/config'
require 'rcr/easy'
require 'rcr/data/image'
require 'rcr/heuristic_oversegmenter/local_minima'
require 'rcr/word_segmentator/heuristic_oversegmentation'

@classifier = RCR.build_letter_classifier
@segmentator = RCR::WordSegmentator::HeuristicOversegmentation.new(
		RCR::HeuristicOversegmenter::LocalMinima.new, @classifier, RCR.build_language_model)

@country_list = File.read("country_list.txt").lines.map(&:strip)

def best_choices_for_image(path)
	image = RCR::Data::Image.load(path)

	results = @segmentator.segment_for_words_with_scores(image, @country_list).to_a
	results.sort_by { |pair| pair.last }.reverse.take(5)
end

if ARGV.empty?
	# Run on every country image.
	Dir["countries/*.png"].sort.each do |filename|
		raise unless filename =~ /countries\/([a-z]+)\.png$/
		expect = $1.upcase

		choices = best_choices_for_image(filename)

		puts "#{expect.rjust(20)}: #{expect == choices.first.first ? "OK" : "ERR"}"
		choices.each do |pair|
			puts "#{pair.first.rjust(30)}: %.02f" % pair.last
		end
		puts
	end
else
	ARGV.each do |filename|
		puts "Best guesses for #{filename}:"
		best_choices_for_image(filename).each do |pair|
			puts "#{pair.first.rjust(30)}: %.02f" % pair.last
		end
		puts
	end
end
